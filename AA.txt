#include "monty.h"



/**
 * Add_Head -  adds a new node
 * with null previous and next filelds
 * @H: a null pointer to an empty list
 * @n: element to be added in the linked list as the new head
 * Return: the address of the new element, or NULL if it failed
 */
stack_t *Add_Head(stack_t **H, int n)
{
	stack_t *N = malloc(sizeof(stack_t));

	if (!N)
		return (NULL);
	N->n = n;
	N->next = NULL;
	N->prev = NULL;
	*H = N;
	return (N);
}
/**
 * add_stack -  adds a new node at the beginning of
 *a stack_t list.
 *
 * @head: pointer to pointer to head
 * @n: new node integer value
 * Return: stack_t* new added node
 */
stack_t *add_stack(stack_t **head, const int n)
{
	stack_t *NODE, *HEAD  = *head;

		if (!head)
			return (NULL);
		if (!*head)
			return (Add_Head(head, n));
	NODE = malloc(sizeof(stack_t) * 1);
	if (!NODE)
		return (NULL);

	/* NRW NODE*/
	NODE->n = n;
	NODE->prev = NULL;
	NODE->next = HEAD;
	/*HEAD*/
	(*head)->prev = NODE;

	*head = NODE;

	return (NODE);
}


/**
 * insert_stack_at_index - inserts a new node at a given position
 *
 * @h:double pointer to Hrad node
 * @idx: the given position
 * @n:inter value all node data
 * Return: stack_t* momory address of  added node,
 *(NULL) if it fail to add node
 */
stack_t *insert_stack_at_index(stack_t **h, unsigned int idx, int n)
{
	size_t i;
	stack_t *H = *h, *midNode;

	if (idx == 0)
		return (add_stack(h, n));

	for (i = 0; H; i++, H = H->next)
	{
		if (H->next == NULL && i + 1 == idx)
			return (add_stack_end(h, n));
		if (i == idx)
		{
			midNode = malloc(sizeof(stack_t));
			if (!midNode)
				return (NULL);
			midNode->n = n;
			midNode->next = H;
			midNode->prev = H->prev;

			H->prev->next = midNode;
			H->prev = midNode;
			return (midNode);
		}

	}

		return (NULL);
}
/**
 * add_stack_end -  adds a new node at the  end  of
 *a stack_t list.
 *
 * @head: pointer to pointer to head
 * @n: new node integer value
 * Return: stack_t* new added node
 */
stack_t *add_stack_end(stack_t **head, const int n)
{
	stack_t *NODE, *HEAD  = *head;

		if (!head)
			return (NULL);
		if (!*head)
			return (Add_Head(head, n));
	NODE = malloc(sizeof(stack_t) * 1);
	if (!NODE)
		return (NULL);
	while (HEAD->next)
		HEAD = HEAD->next;
	/* NRW NODE*/
	NODE->n = n;
	NODE->prev = HEAD;
	NODE->next = NULL;
	/* (*head)->prev = NODE; */
	HEAD->next = NODE;



	return (NODE);
}


/**
 * delete_stack_t_at_index - delet a  node at a given position
 *
 * @head:double pointer to Hrad node
 * @index: the given position
 * Return:(-1) if cant delet node , else (1)
 */
int delete_stack_t_at_index(stack_t **head, unsigned int index);

int delete_stack_t_at_index(stack_t **head, unsigned int index)
{

	size_t i = 0;
	stack_t *H = *head, *tmpH;

	if (*head == NULL)
		return (-1);

	if (index == 0)
	{
		/* in all cases make list pointer point node1*/
		(*head)  = H->next;
		/*split node0 from list*/
		H->prev = NULL;
		/* if index=0 and list lenth > 1*/
		if (H->next)
		{
			/* node 0 will be deletd so   node1 â–¶ node 0*/
			/* make node1 prev = NULL */
			H->next->prev = NULL;
		}
			/* deleting node 0*/
			free(H);
		return (1);
	}

	for (; H; H = H->next, i++)
	{

		if ((H->next == NULL) && (i == index))
		{
			/* tmpH = H; */
			H->prev->next = NULL;
			free(H);
			return (1);
		}

		if (i == index)
		{
			tmpH = H;

			H->prev->next = H->next;
			H->next->prev = H->prev;
			free(tmpH);
			return (1);
		}
	}
	return (-1);
}
/**
 *print_stack - print linked singaly list nodes
 * @h: pointer to first node
 * Return: size_t i whics number of printd  nodes
 */
unsigned int  Print_stack(const stack_t *h)
{
	unsigned int  i;
	const stack_t *H = h;

	for (i = 0; H; i++)
	{
		printf("%d\n", H->n);
		H = H->next;
	}
	return (i);
}
/**
 *stack_len - return  singaly list length
 * @h: pointer to first node
 * Return: size_t i whics number of  nodes
 */
unsigned int stack_len(const stack_t *h)
{
	size_t i;
	const stack_t *H = h;

	for (i = 0; H; i++)
	{
		H = H->next;
	}
	return (i);
}
#include "monty.h"

char  **Tokenize_in_Arr(char *string, char*  delim)
{
	size_t TksNum = 0;
	char *token = NULL, **Tokens = NULL;

	token = strtok(string, delim);
	while (token)
	{

		Tokens = realloc(Tokens, sizeof(char *) * (TksNum + 1));

		if (!Tokens)
		{
			FREE_2D_ARR(Tokens);
			perror("tokenaize.c:21 realloc");
			return (NULL);
		}
	/* tokinize && Asign */
		Tokens[TksNum] = Strdup(token);
		token = strtok(NULL, delim);
		TksNum++;


	}

		Tokens = realloc(Tokens, (sizeof(char *) * (TksNum + 1)));
		if (!Tokens)
		{
			FREE_2D_ARR(Tokens);
			perror("tokenaize.c:21 realloc");
			return (NULL);
		}


		Tokens[TksNum] = NULL;

			return (Tokens);
}

size_t Print_2D_Arr(char** array, size_t isNull)
{
	size_t i, j;

	if (!array)
		return (0);
	if (isNull >  0)
		j = isNull;
	else if (isNull == 0)
		for (j = 0; array[j]; j++)
			if (array[j] == NULL)
				return (0);

	for (i = 0; i < j; i++)
		printf("[%u] - %s  \n", (unsigned int)i,array[i]);

	return (i);
}

char *Strdup(const char *str)
{
	int len;
	char *new_str;

	if (str == NULL) {
		return NULL;
	}

	len = strlen(str);
	new_str = (char *)malloc(len + 1);

	if (new_str == NULL)
		return NULL;

	strcpy(new_str, str);
	return new_str;
}

void rm_newLine(char *string)
{
	for (; *string != '\n'; string++)
		;
	*string = '\0';
}#include "monty.h"
/**
 * creat_One -  adds a new node
 * with null previous and next filelds
 * @n: element to be added in the linked list as the new head
 * Return: the address of the new element, or NULL if it failed
 */
stack_t *creat_One( int n)
{		stack_t *x = malloc(sizeof(stack_t));
 		x->next = 0;
 		x->prev = 0;
		x->n  = n;
		return (x);

}
/**
 * Creat_stack_t - inserts a new node at a given position
 *
 * @LIST:double pointer to Hrad node
 * @index: the given position
 * @n:inter value all node data
 * Return: stack_t* momory address of  added node,
 *(NULL) if it fail to add node
 */
stack_t *Creat_stack_t( int n, stack_t **LIST, int index);
stack_t *Creat_stack_t( int n, stack_t **LIST, int index)
{
	int i;
	stack_t *tmp, *List_;

	if (n || !LIST)
			return (0);
	if (!*LIST ||  (index == 0 && !*LIST))
		return  ( creat_One(n));
	if (LIST && index == 0)
		{
			tmp = creat_One(n);
			tmp->prev = 0;
			tmp->next = (*LIST);
			(*LIST)->next->prev =tmp;

				return (tmp);

		}
		for (i = 0, List_ = *LIST; List_->next; List_ = List_->next, i++ )
		{
			if (i == index)
			{
				tmp = creat_One(n);
				tmp->next = List_;
				tmp->prev = List_->prev;

				List_->prev = tmp;

				return (tmp);

			}
			if (index == i + 1 && !List_->next )
			{
				tmp = creat_One(n);
				List_->next = tmp;
				tmp->prev = List_;
				return (tmp);

			}
		}
		return (0);
 }
#include "monty.h"
#include <stdlib.h>

int main(int argc, char **argv)
{
	if (argc < 2)
			exit(EXIT_FAILURE);



  Get_Inout(argv[1]);


	return (0);

}#include "monty.h"
/**
 * Free_2D_Array - free Double array
 *
 * @Array: array to pefree
 * Return: (size_t) size of indexes has been freed,
 *(0) on errors
 */
size_t Free_2D_Array(char **Array)
{
	size_t i, j;

	for (j = 0; Array[j]; j++)
		;
	for (i = 0; i <= j; i++)
		if (Array[i])
		{

			free(Array[i]);
			Array[i] = NULL;
		}



	if (Array)
	{
		free(Array);
		Array = NULL;
	}
	return (i);
}
/**
 * free_stack -  frees a stack_t list.
 * @head:  pointer of the head node.
 * Return: VOID
 */
void free_stack(stack_t *head)
{
	stack_t *tmp = head;

	while (tmp)
	{
		stack_t *next = tmp->next;

		free(tmp);
		tmp = next;
	}
}
#include "monty.h"
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int n;
struct instruction_s opcode_arr[] =
{
{"push", push},
{"add", add},
{"pall", pall},
{"swap", swap},
{"pop", pop},
{"pint", pint},
{NULL, NULL}
};
int *instructionF(char *arg0, char *arg1, unsigned int line, stack_t **list )
{
	static int i;


/*
	if (arg1 == NULL || !is_valid_integer(arg1))
		{
			fprintf(stderr, "L%u: usage: push integer\n", line);
		}
	else
	 	n = atoi(arg1);
*/
	if (arg0 && arg1)
	{
		n = atoi(arg1);
		for (i = 0; i <= 5 ; i++ )
		{

			if (!strcmp(opcode_arr[i].opcode, arg0) )
			{

			 	 opcode_arr[i].f(list, line);

			}
		}
	}



	return (0);
}



void push(stack_t **stack, unsigned int line_number)
{
	unsigned int size = 0;

	size = stack_len(*stack);
	printf("size = %u\n", size);

	if (*stack == NULL || size == 0)
	{
		/*  List is empty or position is 0, create a new head node */
		*stack = Creat_stack_t(n, stack, 0);
	}
	else
	{
		/* Insert the new node at the end of the list */
		*stack = Creat_stack_t(n, stack, size);
	}

	line_number = line_number;
}


void pint(stack_t **stack, unsigned int line_number)
{
	*stack = NULL;
	line_number = line_number;

}
void add(stack_t **stack, unsigned int line_number)
{
	*stack = NULL;
	line_number = line_number;

}
void pall(stack_t **stack, unsigned int line_number)
{
	*stack = NULL;
	line_number = line_number;
}
void swap(stack_t **stack, unsigned int line_number)
{

	*stack = NULL;
	line_number = line_number;
}
void pop(stack_t **stack, unsigned int line_number)
{
	*stack = NULL;
	line_number = line_number;
}
bool is_valid_integer(const char *str)
{
	int i ;

	if (str == NULL || str[0] == '\0')
		return false;

	for (i = 0; str[i] != '\0'; i++)
	{
		if (!isdigit(str[i]) && (i == 0 && str[i] != '-' && str[i] != '+'))
			return false;
	}

	return true;
}#include "monty.h"
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char **CATA;

size_t Get_Inout(char *filePath)
{
	int status;
	size_t size;
	unsigned int line = 0;
	char *command, **CATA;
	FILE *file = fopen(filePath, "r");
	stack_t *x = NULL;

	if (!file)
	{
		fprintf(stderr, "Error: Can't open file %s\n", filePath);
		exit(EXIT_FAILURE);
	}
	while (status != -1)
	{
		line++;
		command  = malloc(1000 * sizeof(char));
		status = getline(&command, &size, file);



		if (!strlen(command))
		{
			FreeVar(command);
			break;
		}
		CATA = Tokenize_in_Arr(command, " \n");
		instructionF(CATA[0], CATA[1], line, &x);
		FreeVar(command);
		FREE_2D_ARR(CATA);

	}
		if (status == -1 )
			fclose(file);
		Print_stack(x);
	return (size);

}#ifndef MONTY_H
#define MONTY_H

/* Includes */

#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <stdbool.h>
#include <ctype.h>

/* #MACROS */

#define DEBUG(M) printf("%s%s:%d\n", M, __FILE__, __LINE__);
#define DBG printf("%s:%d\n", __FILE__, __LINE__)
#define FreeVar(var) do { \
	 if (var)\
	{ \
		free(var); \
		var = NULL; \
	} \
} while(0)

#define FREE_2D_ARR(arr) { \
if (arr)\
{ \
		Free_2D_Array(arr); \
		arr = NULL; \
} \
} while(0)

/* Data structures */
/**
 * struct stack_s - doubly linked list representation of a stack (or queue)
 * @n: integer
 * @prev: points to the previous element of the stack (or queue)
 * @next: points to the next element of the stack (or queue)
 *
 * Description: doubly linked list node structure
 * for stack, queues, LIFO, FIFO
 */
typedef struct stack_s
{
		int n;
		struct stack_s *prev;
		struct stack_s *next;
} stack_t;
/**
 * struct instruction_s - opcode and its function
 * @opcode: the opcode
 * @f: function to handle the opcode
 *
 * Description: opcode and its function
 * for stack, queues, LIFO, FIFO
 */
typedef struct instruction_s
{
		char *opcode;
		void (*f)(stack_t **stack, unsigned int line_number);
} instruction_t;
/*""" Global Variables"""*/
/* Commandline Argument Tpokinaized Array*/
extern int  n;


/*""" Functions Prototype """"*/

/* memory.c*/
size_t Free_2D_Array(char **Array);
void free_stack(stack_t *head);


/* Get_Input.c*/
size_t Get_Inout(char *filePath);



/*String*/
char  **Tokenize_in_Arr(char *string, char*  delim);
size_t Print_2D_Arr(char** array, size_t isNull);
void rm_newLine(char *string);

/*opcode_handler.c*/

void push( stack_t **stack, unsigned int line_number);
void add( stack_t **stack, unsigned int line_number);
void pall( stack_t **stack, unsigned int line_number);
void swap( stack_t **stack, unsigned int line_number);
void pop( stack_t **stack, unsigned int line_number);
void pint( stack_t **stack, unsigned int line_number);
int *instructionF(char *arg0, char *arg1, unsigned int line, stack_t **list );


bool is_valid_integer(const char *str);

/* Data-Structure.c */
stack_t *creat_One ( int n);
stack_t *Creat_stack_t( int n, stack_t **LIST, int index);
stack_t *creat_One( int n);
int delete_stack_t_at_index(stack_t **head, unsigned int index);
unsigned int Print_stack(const stack_t *h);
unsigned int  stack_len(const stack_t *h);
stack_t *insert_stack_at_index(stack_t **h, unsigned int idx, int n);
stack_t *add_stack_end(stack_t **head, const int n);
stack_t *Add_Head(stack_t **H, int n);
stack_t *add_stack(stack_t **head, const int n);



 ssize_t getline(char **lineptr, size_t *n, FILE *stream);
 char *Strdup(const char *str);

#endif
