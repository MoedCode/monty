General requirements
More Info
Data structures
Please use the following data structures for this project. Don’t forget to include them in your header file.

/**
 * struct stack_s - doubly linked list representation of a stack (or queue)
 * @n: integer
 * @prev: points to the previous element of the stack (or queue)
 * @next: points to the next element of the stack (or queue)
 *
 * Description: doubly linked list node structure
 * for stack, queues, LIFO, FIFO
 */
typedef struct stack_s
{
        int n;
        struct stack_s *prev;
        struct stack_s *next;
} stack_t;
/**
 * struct instruction_s - opcode and its function
 * @opcode: the opcode
 * @f: function to handle the opcode
 *
 * Description: opcode and its function
 * for stack, queues, LIFO, FIFO
 */
typedef struct instruction_s
{
        char *opcode;
        void (*f)(stack_t **stack, unsigned int line_number);
} instruction_t;
Compilation & Output
Your code will be compiled this way:
$ gcc -Wall -Werror -Wextra -pedantic -std=c89 *.c -o monty
Any output must be printed on stdout
Any error message must be printed on stderr
Here is a link to a GitHub repository that could help you making sure your errors are printed on stderr
Tests
We strongly encourage you to work all together on a set of tests

The Monty language
Monty 0.98 is a scripting language that is first compiled into Monty byte codes (Just like Python). It relies on a unique stack, with specific instructions to manipulate it. The goal of this project is to create an interpreter for Monty ByteCodes files.

Monty byte code files

Files containing Monty byte codes usually have the .m extension. Most of the industry uses this standard but it is not required by the specification of the language. There is not more than one instruction per line. There can be any number of spaces before or after the opcode and its argument:

julien@ubuntu:~/monty$ cat -e bytecodes/000.m
push 0$
push 1$
push 2$
  push 3$
                   pall    $
push 4$
    push 5    $
      push    6        $
pall$
julien@ubuntu:~/monty$
Monty byte code files can contain blank lines (empty or made of spaces only, and any additional text after the opcode or its required argument is not taken into account:

julien@ubuntu:~/monty$ cat -e bytecodes/001.m
push 0 Push 0 onto the stack$
push 1 Push 1 onto the stack$
$
push 2$
  push 3$
                   pall    $
$
$
                           $
push 4$
$
    push 5    $
      push    6        $
$
pall This is the end of our program. Monty is awesome!$
julien@ubuntu:~/monty$
The monty program

Usage: monty file
where file is the path to the file containing Monty byte code
If the user does not give any file or more than one argument to your program, print the error message USAGE: monty file, followed by a new line, and exit with the status EXIT_FAILURE
If, for any reason, it’s not possible to open the file, print the error message Error: Can't open file <file>, followed by a new line, and exit with the status EXIT_FAILURE
where <file> is the name of the file
If the file contains an invalid instruction, print the error message L<line_number>: unknown instruction <opcode>, followed by a new line, and exit with the status EXIT_FAILURE
where is the line number where the instruction appears.
Line numbers always start at 1
The monty program runs the bytecodes line by line and stop if either:
it executed properly every line of the file
it finds an error in the file
an error occured
If you can’t malloc anymore, print the error message Error: malloc failed, followed by a new line, and exit with status EXIT_FAILURE.
You have to use malloc and free and are not allowed to use any other function from man malloc (realloc, calloc, …)

# task 6

6. sub
#advanced
Score: 16.67% (Checks completed: 16.67%)
Implement the sub opcode.

The sub opcode

The opcode sub subtracts the top element of the stack from the second top element of the stack.

Usage: sub
If the stack contains less than two elements, print the error message L<line_number>: can't sub, stack too short, followed by a new line, and exit with the status EXIT_FAILURE
The result is stored in the second top element of the stack, and the top element is removed, so that at the end:
The top element of the stack contains the result
The stack is one element shorter
julien@ubuntu:~/monty$ cat bytecodes/19.m
push 1
push 2
push 10
push 3
sub
pall
julien@ubuntu:~/monty$ ./monty bytecodes/19.m
7
2
1
julien@ubuntu:~/monty$
Repo:

GitHub repository: monty

my function
void sub(stack_t **stack, unsigned int line_number)
{
	IF_NULL_STACK
	STCK_LEN_2
	(*stack)->next->n = (*stack)->next->n - (*stack)->n;
	delete_stack_t_at_index(stack, 0);
}
my function dependances
int delete_stack_t_at_index(stack_t **head, unsigned int index)
{

	size_t i = 0;
	stack_t *H = *head, *tmpH;

	if (*head == NULL)
		return (-1);

	if (index == 0)
	{
		/* in all cases make list pointer point node1*/
		(*head)  = H->next;
		/*split node0 from list*/
		H->prev = NULL;
		/* if index=0 and list lenth > 1*/
		if (H->next)
		{
			/* node 0 will be deletd so   node1 ▶ node 0*/
			/* make node1 prev = NULL */
			H->next->prev = NULL;
		}
			/* deleting node 0*/
			free(H);
		return (1);
	}

	for (; H; H = H->next, i++)
	{

		if ((H->next == NULL) && (i == index))
		{
			/* tmpH = H; */
			H->prev->next = NULL;
			free(H);
			return (1);
		}

		if (i == index)
		{
			tmpH = H;

			H->prev->next = H->next;
			H->next->prev = H->prev;
			free(tmpH);
			return (1);
		}
	}
	return (-1);
}

the output
mohamed@DESKTOP-S296B4S:/mnt/c/Users/Active/Desktop/Coding/monty$ ./monty bytecodes/19.m
7
2
1
mohamed@DESKTOP-S296B4S:/mnt/c/Users/Active/Desktop/Coding/monty$ valgrind ./monty bytecodes/19.m
the output as same as in expected in the task what is the requirements
which that function does not meet